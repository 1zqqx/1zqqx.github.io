<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言宏</title>
    <link href="/2025/05/10/C%E8%AF%AD%E8%A8%80%E5%AE%8F/"/>
    <url>/2025/05/10/C%E8%AF%AD%E8%A8%80%E5%AE%8F/</url>
    
    <content type="html"><![CDATA[<p>在 C 语言中，宏（Macro）是一种预处理指令，用于在<strong>编译前</strong>对源代码进行文本替换。</p><p>宏由预处理指令 <code>#define</code> 定义，分为两种类型：</p><ul><li>对象式宏（Object-like Macro）：无参数的简单文本替换。</li><li>函数式宏（Function-like Macro）：带参数的类似函数调用的宏。</li></ul><h2 id="对象式宏"><a href="#对象式宏" class="headerlink" title="对象式宏"></a>对象式宏</h2><p><code>#define 标识符 替换文本</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PI 3.14159 <span class="hljs-comment">// 定义常量（如 PI、MAX_SIZE）。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SIZE 100 </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG <span class="hljs-comment">// 条件编译（如 #ifdef DEBUG）。</span></span><br></code></pre></td></tr></table></figure><h2 id="函数式宏"><a href="#函数式宏" class="headerlink" title="函数式宏"></a>函数式宏</h2><p><code>#define 宏名(参数列表) 替换文本</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 简单函数式宏</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQUARE(x) ((x) * (x))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX(a, b) ((a) &gt; (b) ? (a) : (b))</span><br><br><span class="hljs-comment">// 多行宏（用反斜杠 \ 连接）</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAP(a, b) \</span><br><span class="hljs-meta">    do &#123; \</span><br><span class="hljs-meta">        typeof(a) temp = (a); \</span><br><span class="hljs-meta">        (a) = (b); \</span><br><span class="hljs-meta">        (b) = temp; \</span><br><span class="hljs-meta">    &#125; while (0)</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">5</span>;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">10</span>;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Square: %d\n&quot;</span>, SQUARE(x));      <span class="hljs-comment">// 展开为 ((x) * (x))</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Max: %d\n&quot;</span>, MAX(x, y));         <span class="hljs-comment">// 展开为 ((x) &gt; (y) ? (x) : (y))</span><br>    <br>    SWAP(x, y);                             <span class="hljs-comment">// 展开为一个 do-while 语句</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Swapped: x=%d, y=%d\n&quot;</span>, x, y);  <span class="hljs-comment">// 输出: x=10, y=5</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项</p><blockquote><p>括号保护：参数和整个表达式都应加括号，避免运算符优先级问题。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADD(a, b) a + b  <span class="hljs-comment">// ADD(2, 3) * 4 会展开为 2 + 3 * 4 = 14</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADD(a, b) ((a) + (b))  <span class="hljs-comment">// 展开为 ((2) + (3)) * 4 = 20</span></span><br></code></pre></td></tr></table></figure><br>参数不计算：宏参数是纯文本替换，不会提前求值</p></blockquote><h2 id="预处理器操作符-与"><a href="#预处理器操作符-与" class="headerlink" title="预处理器操作符#与##"></a>预处理器操作符<code>#</code>与<code>##</code></h2><h3 id="操作符（字符串化）"><a href="#操作符（字符串化）" class="headerlink" title="操作符（字符串化）"></a>操作符（字符串化）</h3><p>将宏参数转换为字符串常量，参数会被直接转换为字符串，不会进行表达式求值或变量替换；如果参数本身是字符串，会自动添加额外的引号（例如 “abc” 会变成 “\”abc\””）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRINT(x) printf(#x <span class="hljs-string">&quot; = %d\n&quot;</span>, x)</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">42</span>;<br>    PRINT(num);  <span class="hljs-comment">// 展开为 printf(&quot;num&quot; &quot; = %d\n&quot;, num);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>gcc -e</code> 指令查看预宏展开后的文件如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"># <span class="hljs-number">5</span> <span class="hljs-string">&quot;c_define.c&quot;</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-string">&quot; = %d\n&quot;</span>, x);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="操作符（记号链接）"><a href="#操作符（记号链接）" class="headerlink" title="操作符（记号链接）"></a>操作符（记号链接）</h3><p><code>##</code> 操作符用于将两个预处理记号（token）连接成一个新的记号。它可以在宏定义的参数列表或替换文本中使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONCAT(a, b) a##b</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> num10 = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Value: %d\n&quot;</span>, CONCAT(num, <span class="hljs-number">10</span>));  <span class="hljs-comment">// 等价于 printf(&quot;%d&quot;, num10);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="define与const"><a href="#define与const" class="headerlink" title="define与const"></a><code>define</code>与<code>const</code></h2><p><code>#define</code> 和 <code>const</code> 都可用于定义常量，但它们的实现机制、作用域和使用场景有本质区别。<br><img src="image1.png" alt="img"></p><h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><p>宏定义也可以用于条件编译<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEBUG</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> LOG(msg) printf(<span class="hljs-string">&quot;[DEBUG] %s\n&quot;</span>, msg)</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> LOG(msg)  <span class="hljs-comment">// 空定义，忽略日志</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// 检查系统平台</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __linux__</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> PLATFORM <span class="hljs-string">&quot;Linux&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(_WIN32)</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> PLATFORM <span class="hljs-string">&quot;Windows&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> PLATFORM <span class="hljs-string">&quot;Unknown&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>conda文档</title>
    <link href="/2025/04/01/conda%E6%96%87%E6%A1%A3/"/>
    <url>/2025/04/01/conda%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="1-conda手册"><a href="#1-conda手册" class="headerlink" title="1. conda手册"></a>1. conda手册</h1><div class="row">    <embed src="/pdf/conda-24.4.0.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="2-hexo-常用操作"><a href="#2-hexo-常用操作" class="headerlink" title="2. hexo 常用操作"></a>2. hexo 常用操作</h1><p>hexo 文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><h2 id="2-1-文章"><a href="#2-1-文章" class="headerlink" title="2.1 文章"></a>2.1 文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p>Hexo 有三种默认布局：post、page 和 draft。 每个布局创建的文件会被保存到不同的路径。 新创建的帖子被保存到 source/_post 文件夹。</p><blockquote><p>布局路径<br>post：source/_posts；<br>page：source；<br>draft：source/_drafts；</p></blockquote><h2 id="2-2-草稿"><a href="#2-2-草稿" class="headerlink" title="2.2 草稿"></a>2.2 草稿</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo publish [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p>在本地编辑时如果要看到草稿的预览内容，在启动命令后加上<code>--draft</code>选项或在 <code>_config.yml</code> 启用 <code>render_draft</code> 设置来渲染草稿。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s --draft<br></code></pre></td></tr></table></figure></p><!-- todo --><h2 id="2-3-Page"><a href="#2-3-Page" class="headerlink" title="2.3 Page"></a>2.3 Page</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page &lt;page_name&gt;<br></code></pre></td></tr></table></figure><h2 id="2-3-在文章中支持pdf展示"><a href="#2-3-在文章中支持pdf展示" class="headerlink" title="2.3 在文章中支持pdf展示"></a>2.3 在文章中支持pdf展示</h2><p>懒人办法：</p><ol><li>安装pdf插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-pdf<br></code></pre></td></tr></table></figure></li><li>在source文件夹下新建一个 <code>pdf</code> 文件夹，把需要展示的pdf放到该文件夹下。</li><li>在正文部分添加<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;% pdf /pdf/pdf-name.pdf %&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Fluid 配置 Giscus</title>
    <link href="/2025/03/29/Hexo-Fluid-%E9%85%8D%E7%BD%AE-Giscus/"/>
    <url>/2025/03/29/Hexo-Fluid-%E9%85%8D%E7%BD%AE-Giscus/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>使用Giscus在Hexo Fluid文章中评论功能。</p><p>giscus官网：<a href="https://giscus.app/zh-CN">https://giscus.app</a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>准备一个github的公开仓库</li><li>为该仓库安装 <code>giscus App</code>, <a href="https://github.com/apps/giscus">安装giscus App</a></li><li>在该仓库中开启<code>Discussions</code>功能,<a href="https://docs.github.com/en/github/administering-a-repository/managing-repository-settings/enabling-or-disabling-github-discussions-for-a-repository">在你的仓库中启用</a></li></ul><h1 id="Giscus-的运作原理"><a href="#Giscus-的运作原理" class="headerlink" title="Giscus 的运作原理"></a>Giscus 的运作原理</h1><p>&emsp;&emsp; giscus 加载时，会使用 GitHub Discussions 搜索 API 根据选定的映射方式（如 <code>URL</code>、<code>pathname</code>、<code>&lt;title&gt;</code> 等）来查找与当前页面关联的 discussion。如果找不到匹配的 discussion，giscus bot 就会在第一次有人留下评论或回应时自动创建一个 discussion。</p><p>&emsp;&emsp;访客如果想要评论，必须按照 GitHub OAuth 流程授权 giscus app 代表他发布，或者可以直接在 GitHub Discussion 里评论。你可以在 GitHub 上管理评论。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>&emsp;&emsp;接下来在 giscus 的官网 配置模块选择所需配置：<br><img src="image-1.png" alt=""><br>&emsp;&emsp;其中 Discussion 分类那里 giscus 推荐使用的 是 Announcements ，但是我没有弄好，索性就用 General 了，全部选好后，下边会出现一个你选的配置 <code>&lt;script&gt;</code> 标签。在 Fluid 的 <code>_config.yml</code> 文件中把对应位置 配置填上去即可。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">giscus:</span><br>  <span class="hljs-attr">repo:</span> <br>  <span class="hljs-attr">repo_id:</span> <br>  <span class="hljs-attr">category:</span> <br>  <span class="hljs-attr">category_id:</span> <br>  <span class="hljs-comment"># Available values: pathname | url | title | og:title</span><br>  <span class="hljs-attr">mapping:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-comment"># Available values: 0 | 1</span><br>  <span class="hljs-attr">reactions_enabled:</span> <span class="hljs-number">1</span><br>   <span class="hljs-comment"># Available values: 0 | 1</span><br>  <span class="hljs-attr">emit_metadata:</span> <span class="hljs-number">0</span><br>  <span class="hljs-comment"># Available values: light | dark | dark_high_contrast | transparent_dark | preferred-color-scheme</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">preferred_color_scheme</span><br>  <span class="hljs-comment"># Available values: en | zh-CN</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-comment"># Place the comment box above the comments</span><br>  <span class="hljs-attr">input_position:</span> <span class="hljs-string">top</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;注意在 Fluid 开启评论插件<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugin</span><br><span class="hljs-attr">comments:</span><br><span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br><span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br><span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis | giscus | discuss</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">giscus</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考研记录</title>
    <link href="/2025/03/25/%E8%80%83%E7%A0%94%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/03/25/%E8%80%83%E7%A0%94%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>&emsp;&emsp;今天是2025年3月25日，上午看到学院的拟录取名单，不觉如释重负，那些胆战心惊离我而去。应老师和学弟建议，写下这篇经验帖子，顺便记录这一年来的生活经历。也许是氛围到此，觉得不写些东西记录这段经历，好像丢失了什么。</p><p>&emsp;&emsp;我考的 11408，总分 328 ，政治 53，英语 39，数学 119，408 117，初试11/35，复试3/28，上机 189/200，已成功被中国矿业大学（北京）拟录取。虽然成绩单上的分数没有那么突出，或以下内容或仅仅记录本人的心路历程，记录本人学习过程，仅供经验参考，不对任何结果负责，其中或许语言逻辑结构不是很连贯，见谅。</p><h1 id="关于初试"><a href="#关于初试" class="headerlink" title="关于初试"></a>关于初试</h1><p>&emsp;&emsp;英语，我的英语基础是非常差劲的（英语水平大概就是语法一点不会，只认识单词，<code>gd学长</code>是真正的六边形战士），暑假之前的学习基本上就是上午写一篇英一的阅读，写完之后对答案，然后查不认识的单词，记到一张A4纸上，再看B站上一位 up 的英语阅读讲解（这位：<a href="https://space.bilibili.com/258959750/lists/715867">Eli田瀚博的个人空间</a>），听他讲之后能对文章里面的长难句有个大概的翻译理解。但是这位up的每篇阅读的讲解都有至少一个半小时，所以后面大概到4、5月份时候就不看了，后来在室友的推荐下，看（这位：<a href="https://space.bilibili.com/36033152">大道至简Loru的个人空间</a>）up 的2011年之后的英语阅读讲解，我最受益的是这个 up 的英语单词整理，他把每一篇的常见单词整理出一本pdf（在这：<a href="https://mp.weixin.qq.com/s/qOW0N4-0gKl0YWKuJAkOsw">大道至简Loru-完整版词汇书</a>），把他打印下来，写完一篇阅读之后背背单词，把自己不认识，经常忘的单词或者熟词异意也记在上面，在晚上闭馆前完成今天的任务后有时间也会再看看，单词还是非常重要的。国庆之后开始每天上午一套数学卷，当天中午或者是第二天把错题纠正一下，下午写 408 真题，晚上写英语的小三门外加学一些英语作文的句子和政治。</p><p>&emsp;&emsp;数学，数学用的是张宇的基础30讲，我个人感觉25版张宇基础30讲还是非常不错的。基础到7月中旬结束，印象最深的还是高数 仅数一 多元积分那，刚开始学的时候几种积分方式真是一脸懵，后来画思维导图分类一下，先确定积分类型，再套公式，好像也就那么回事；线性代数也是全程张宇；概率论与数理统计，因为大三下有概率论的课而且这个时候张宇概率论还没更新，所以我概率论前前后后看了好几个老师，有余炳森，李良，方浩，都看过一点。可以根据适合自己的风格学习。数学一定要写题，根据自己跟的老师选习题册。从7月底开始看张宇的强化课，对我来说强化课是有点难的，强化书上的例题仅仅写了张宇圈出来的那些题，1000题强化篇全部写了，可能比强化书上的稍简单，更多的还是回忆公式以及对应题目的解题方法。国庆节后开始写真题，先写了21-24年的，再从20年开始往前写，写真题时可能会感到熟悉，但是也不会说见到熟悉的就跳过，也要认真计算确保每一步都是正确的。后面模拟题写了24、25《张宇4套卷》（比张八简单），合工大共创超越10套就写了第一套，还参加了 姜晓千 的万人模考（9.9元4场考试带人工批改），均分90左右，读者也一定不要觉得模拟的分数就是你的实际水平。</p><p>&emsp;&emsp;对于经常犯的计算错误，要在平时习惯中尽量改正，比如本人经常在计算过程中算着算着系数就丢了，可以将暂时不参与计算的系数或者常数打上标记，画个符号标记提醒一下，在该题计算结束后从头至尾再看一遍计算过程是否漏掉了系数。考试时给的草稿纸大概有4张A4纸那么大，完全够用，一定要划清每道题的演草界限，也方便最后检查。到这里就不得不说一下我今年考的数学了，简直就是一坨<code>shit</code>，列出我的罪证，读者引以为戒：第17题：心中默算漏掉系数$ \frac{1}{5} $；第18题：脑子抽抽的计算积分$ \int{\ln x}d\ln x $的结果成了$ \ln |\ln x| $；第20题：题中空间圆投影到坐标平面应为椭圆，直接按圆计算。。。可能考场上真的有降智buff，一定要注意平时的做题习惯<code>T_T</code>。</p><p>&emsp;&emsp;统考408，用的王道的书。在考试范围内，除了计组难一些，其他三门还是容易理解的，主要还是内容太多，容易忘，所以要多重复。在第一轮复习中，主要还是看王道书，写课后题目，王道的视频看的不多，其实像数据结构，操作系统，计网，计组这些课特别是计组，操作系统，在大三上学期刚学过，第一轮看书的时候不太需要看王道的视频课，直接看书可以回忆起绝大部分知识点，哪部分实在是抽象或者书上写得乱七八糟再去看一下视频讲解，也不一定是一棵歪脖子树上吊死，B 站上也有不错的视频针对一个知识点的讲解。有时候王道书上的题写不对也不要怀疑自己的能力，课后的练习题有的确实是<code>shit</code>。</p><p>&emsp;&emsp;在差不多到8月中旬才把四本书看一遍（基本都是晚上的时间学408，<del>然后周六闭馆早回寝室玩去了，有时候晚上出去吃饭了:stuck_out_tongue_closed_eyes:，有点时间都去玩了</del><code>T_T</code>）。第二轮复习强化看了王道咸鱼的课，主要是针对大题的专题讲解，但是除专题之外的小知识点还是需要自己去再重温。我在第二轮复习时，把咸鱼的基础课 ppt 做思维导图打印装订成册（单面打印），在复习的时候遇到遗忘的直接翻这个思维导图，清晰明了，同时在写题时遇到易错或者没有复习到的知识点可以记录在对应思维导图页的背面便于查阅。在复习对应的科目时，结合对应的逻辑来记忆。每种新旧技术的迭代，都是对实际应用问题的解决。</p><p>&emsp;&emsp;今年（25年）在考场上看到某些题有种熟悉的感觉，有些不过是以往真题的变形罢了，总体来说比较常规。这里贴一个408真题详解，目前作者还在继续更新：<a href="https://zhuanlan.zhihu.com/p/3484668199">408历年真题解析（草稿） - 知乎</a></p><p>&emsp;&emsp;政治，政治可以尽早开始。不然考前两周真的很焦虑:confounded:。25年的政治情况相信大家也略有耳闻，可以关注一下肖秀荣、徐涛老师关于政治考研形势的微信文章。这里就不写我的反面案例了。​</p><p>&emsp;&emsp;最后，如果考408要注意总体上的时间分配，不要学鄙人：<del>【数：408：英：政 = 5：2.5：2：0.5】</del></p><p>&emsp;&emsp;考试期间心态也很重要。</p><h1 id="关于竞赛"><a href="#关于竞赛" class="headerlink" title="关于竞赛"></a>关于竞赛</h1><!-- &emsp;&emsp;不登高山，不知天之高也；不临深溪，不知地之厚也。 --><p><img src="icpc-logo.png" alt="img" title="不登高山，不知天之高也；不临深溪，不知地之厚也。"></p><p>&emsp;&emsp;首先要表达一下对社团指导老师的歉意，辜负了刘老师的期望，没有取的过好的成绩，但是在学习算法竞赛的过程中，也算是收获颇丰，受益良多。</p><p>&emsp;&emsp;算法竞赛涉及到常用知识点与数据结构这门课有高度的重合，对大多数考自命题的学校来说数据结构也是必考之一。就我个人来说，也就是刚入门的水平，对一些常用的基础算法都还了解，已经涵盖大部分数据结构知识点，剩下涉及到图中的关键路径，树部分的B、B+树的性质，平衡树，红黑树的性质等在算法竞赛中不是很常用的知识点需要额外的再仔细学习。如果能够在大一大二比较轻松的时候学到这些，在面对408或者数据结构课程时可能会更加的从容；而且在大一大二训练成绩不错可以参加<a href="https://www.lanqiao.cn/">蓝桥杯</a>，<a href="https://www.matiji.net/exam/">百度之星</a>；如果能够通过校内选拔赛还有：<a href="https://gplt.patest.cn/regulation">天梯赛</a>，<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B">ccpc</a>，<a href="https://baike.baidu.com/item/ACM%E5%9B%BD%E9%99%85%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B">icpc</a>省赛、区域赛。</p><p>&emsp;&emsp;408数据结构部分大题也一道12分左右的算法（或数据结构）题，要能够说明解题思路，手写关键部分的代码，并说明空复杂度。其考察内容不出竞赛所学知识。认真训练过肯定是对这道题手拿把掐。并且对于复试需要上机的学校来说，有过算法竞赛的基础，对于上机试题也是相对来说更加有优势。而且其实大部分学校的上机考试是比平常算竟训练的题目简单一些，都是比较常规的模拟题加上一些基础知识点，毕竟要考虑大多数人。<del>比如本人复试面试一坨<code>shit</code>，自我介绍疙瘩，英语文献翻译不顺，老师提问回答不上来，面试完都没心情玩了，直接订票滚蛋了的情况，依然依靠上机（差..AK）复试第三。</del></p><p>&emsp;&emsp;做题是一个非常有意思的过程，但是可能确实是需要坐一定的时间的“冷板凳”才能看出成绩（正面例子：<code>gd学长:XXX...</code>，反面例子：<code>鄙人: x</code>），但是他带给你的是你在面对难题时的思考方式上的提升。</p><h1 id="关于经历"><a href="#关于经历" class="headerlink" title="关于经历"></a>关于经历</h1><p>&emsp;&emsp;可能大部分人到复试的时候项目经历只有一个毕设，这里介绍一个 <font color=#7030a0>南京大学</font> 的非常有意思的选修课《PA实验课》，仅需C语言就可以学习到一个完整的项目，在学习的过程中学习解决问题的方法。在B站有这门课的完整教学视频（更重要的是动手做）：<a href="https://space.bilibili.com/49964811/lists/3778580">NJU-why老师-PA实验课</a>；以及南京大学jyy老师的操作系统课程：<a href="https://space.bilibili.com/202224425/lists/4823953">NJU-jyy老师-操作系统</a></p><hr><p>&emsp;&emsp;最后，祝愿各位都能考上自己的目标院校。</p>]]></content>
    
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/18/hello-world/"/>
    <url>/2025/03/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>Hexo 用户手册：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><p>Fluid 用户手册：<a href="https://hexo.fluid-dev.com/docs/guide/">https://hexo.fluid-dev.com/docs/guide/</a></p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
