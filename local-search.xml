<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux 磁盘操作</title>
    <link href="/2025/09/19/Linux-%E7%A3%81%E7%9B%98%E6%93%8D%E4%BD%9C/"/>
    <url>/2025/09/19/Linux-%E7%A3%81%E7%9B%98%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="Table-of-Content"><a href="#Table-of-Content" class="headerlink" title="Table of Content"></a>Table of Content</h2><p>[TOC]</p><h2 id="磁盘分区模式"><a href="#磁盘分区模式" class="headerlink" title="磁盘分区模式"></a>磁盘分区模式</h2><p>在Linux系统中，磁盘分区是管理存储设备的基础，<strong>MBR（Master Boot Record，主引导记录）</strong> 和 <strong>GPT（GUID Partition Table，全局唯一标识分区表）</strong> 是两种主流的磁盘分区模式，它们在分区原理、容量支持、安全性等方面存在显著差异，直接影响磁盘的使用范围和稳定性。</p><h3 id="MBR分区模式（传统分区模式）"><a href="#MBR分区模式（传统分区模式）" class="headerlink" title="MBR分区模式（传统分区模式）"></a>MBR分区模式（传统分区模式）</h3><p>MBR是1983年随IBM PC DOS 2.0推出的传统分区标准，曾长期主导x86架构的磁盘分区，其核心是存储在磁盘<strong>第一个扇区（512字节）</strong> 中的引导记录信息，包含三部分关键内容：</p><ol><li><strong>引导程序（446字节）</strong>：负责在计算机启动时加载操作系统内核（如Linux的GRUB引导程序）；</li><li><strong>分区表（64字节）</strong>：记录磁盘的分区信息，是MBR的核心；</li><li><strong>结束标志（2字节）</strong>：固定为<code>0x55AA</code>，用于标识MBR的有效性。</li></ol><p><strong>MBR的核心特性：</strong></p><ul><li><strong>分区数量限制</strong>：由于分区表仅64字节，每个分区条目占16字节，因此最多支持<strong>4个主分区</strong>；若需创建更多分区，需将1个主分区设为“扩展分区”，再在扩展分区内创建“逻辑分区”（逻辑分区数量受文件系统限制，如Linux下通常不超过15个）。</li><li><strong>磁盘容量限制</strong>：MBR基于32位地址记录扇区，单个磁盘最大支持<strong>2TB</strong>（计算逻辑：每个扇区512字节 × 2³²个扇区 = 2TB）；若磁盘超过2TB，超出部分无法被MBR识别和使用。</li><li><strong>引导方式兼容性</strong>：仅支持<strong>BIOS（Basic Input/Output System）</strong> 引导模式，无法支持UEFI（Unified Extensible Firmware Interface，统一可扩展固件接口）引导。</li><li><strong>安全性缺陷</strong>：MBR分区表仅存一份（位于磁盘第一个扇区），若该扇区因病毒、硬件故障损坏，整个磁盘的分区信息将丢失，且恢复难度较高。</li><li><strong>Linux下的应用场景</strong>：早期Linux服务器、旧款PC（仅支持BIOS）、容量≤2TB的磁盘（如传统机械硬盘、小容量SSD）。</li></ul><h3 id="GPT分区模式（现代分区模式）"><a href="#GPT分区模式（现代分区模式）" class="headerlink" title="GPT分区模式（现代分区模式）"></a>GPT分区模式（现代分区模式）</h3><p>GPT是 UEFI 规范的一部分，旨在解决MBR的容量和安全性限制，采用“全局唯一标识（GUID）”标识分区，其分区信息不再依赖单个扇区，而是通过多份备份和校验机制保障可靠性。</p><p><strong>GPT的核心特性:</strong></p><ul><li><strong>分区数量无限制（理论上）</strong>：GPT默认支持128个主分区（无需扩展分区/逻辑分区），且可通过修改分区表大小支持更多分区，完全满足多系统、多数据分区的需求（如Linux服务器分多个/data、/backup分区）。</li><li><strong>超大容量支持</strong>：基于64位地址记录扇区，单个磁盘最大支持<strong>8EB</strong>（1EB=1024PB=1048576TB），可满足未来超大规模存储（如企业级100TB+ SSD）的需求。</li><li><strong>引导方式兼容性</strong>：原生支持<strong>UEFI引导</strong>（现代计算机的主流引导模式），也可通过“BIOS兼容模式（CSM）”在部分BIOS设备上使用，但需磁盘支持。</li><li><strong>高安全性</strong>：<ul><li>分区表双重备份（主分区表+磁盘尾部的备份分区表）；</li><li>GPT头和分区表均有CRC32校验值，可检测损坏并通过备份恢复；</li><li>分区类型通过GUID精确标识（如Linux根分区GUID为<code>0x8300</code>，EFI系统分区为<code>0xEF00</code>），避免分区类型混淆。</li></ul></li><li><strong>Linux下的应用场景</strong>：现代PC/服务器（支持UEFI）、容量＞2TB的磁盘（如大容量SSD、RAID阵列）、需要多分区的场景（如多系统共存、复杂存储规划）。</li></ul><h3 id="MBR与GPT的核心区别对比"><a href="#MBR与GPT的核心区别对比" class="headerlink" title="MBR与GPT的核心区别对比"></a>MBR与GPT的核心区别对比</h3><div class="table-container"><table><thead><tr><th>对比维度</th><th>MBR分区模式</th><th>GPT分区模式</th></tr></thead><tbody><tr><td><strong>磁盘容量支持</strong></td><td>最大2TB</td><td>最大8EB（理论值）</td></tr><tr><td><strong>分区数量限制</strong></td><td>最多4个主分区（或3主+1扩展+多个逻辑分区）</td><td>默认128个主分区，可扩展</td></tr><tr><td><strong>引导方式</strong></td><td>仅支持BIOS引导</td><td>原生支持UEFI引导，部分支持BIOS兼容模式</td></tr><tr><td><strong>分区表安全性</strong></td><td>仅1份（位于第一个扇区），损坏后难恢复</td><td>主+备份双份，带CRC32校验，可恢复</td></tr><tr><td><strong>分区标识方式</strong></td><td>分区类型ID（1字节，如0x83代表Linux）</td><td>分区类型GUID（16字节，精确唯一）</td></tr><tr><td><strong>工具兼容性</strong></td><td>支持<code>fdisk</code>（Linux）、DiskPart（Windows）等传统工具</td><td>支持<code>gdisk</code>/<code>parted</code>（Linux）、DiskGenius（Windows）等现代工具</td></tr><tr><td><strong>适用场景</strong></td><td>旧设备（BIOS）、≤2TB磁盘</td><td>新设备（UEFI）、＞2TB磁盘、多分区需求</td></tr></tbody></table></div><h3 id="如何选择MBR还是GPT？"><a href="#如何选择MBR还是GPT？" class="headerlink" title="如何选择MBR还是GPT？"></a>如何选择MBR还是GPT？</h3><p>在Linux系统中，分区模式的选择主要取决于<strong>硬件支持</strong>和<strong>存储需求</strong>：</p><ol><li><strong>优先选GPT的情况</strong>：<ul><li>计算机支持UEFI引导（现代设备默认）；</li><li>磁盘容量＞2TB；</li><li>需要创建超过4个分区（如多系统、多数据分区）；</li><li>对数据安全性要求高（如服务器存储关键数据）。</li></ul></li><li><strong>只能选MBR的情况</strong>：<ul><li>计算机仅支持BIOS引导（如老旧服务器、早期PC）；</li><li>磁盘容量≤2TB，且无需多分区（如嵌入式Linux设备）；</li><li>必须兼容仅支持MBR的旧系统或工具。</li></ul></li></ol><h2 id="物理设备命名规则"><a href="#物理设备命名规则" class="headerlink" title="物理设备命名规则"></a>物理设备命名规则</h2><p>在Linux系统中一切都是文件，硬件设备也不例外。既然是文件，就必须有文件名称。系统内核中的 udev 设备管理器会自动把硬件名称规范起来，目的是让用户通过设备文件的名字可以猜出设备大致的属性以及分区信息等；这对于陌生的设备来说特别方便。另外，udev 设备管理器的服务会一直以守护进程的形式运行并侦听内核发出的信号来管理 <code>/dev</code> 目录下的设备文件。Linux 系统中常见的硬件设备及其文件名称如下：</p><div class="table-container"><table><thead><tr><th>硬件设备</th><th>文件名称</th></tr></thead><tbody><tr><td>IDE 设备（电子继承驱动器）</td><td>/dev/hd[a-d]</td></tr><tr><td>SCSI/SATA/U盘</td><td>/dev/sd[a-z]</td></tr><tr><td>virtio 设备（IO 半虚拟化解决方案）</td><td>/dev/vd[a-z]</td></tr><tr><td>打印机</td><td>/dev/lp[0-15]</td></tr><tr><td>鼠标</td><td>/dev/mouse</td></tr></tbody></table></div><blockquote><p>误区 1：/dev目录中sda设备之所以是a，并不是由插槽决定的，而是由系统内核的识别顺序来决定的。</p><p>误区 2：分区的数字编码<code>sda3</code>不一定是强制顺延下来的，也有可能是手工指定的。</p></blockquote><p>设备的文件名称：</p><p>首先，<code>/dev/</code>目录中保存的应当是硬件设备文件；其次，sd 表示的是存储设备；然后，a 表示系统中同类接口中第一个被识别到的设备；最后，5表示这个设备是一个逻辑分区。一言以蔽之，<code>/dev/sda5</code>表示的就是“这是系统中第一块被识别到的硬件设备中分区编号为 5 的逻辑分区的设备文件”。</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>Linux 系统支持多种文件系统，常见如下：</p><ol><li><strong>Ext4</strong>：它支持的存储容量高达 1EB（1EB=1,073,741,824GB），且能够有无限多的子目录。另外，Ext4 文件系统能够批量分配 block（块），从而极大地提高了读写效率。现在很多主流服务器也会使用 Ext4 文件系统。</li><li><strong>XFS</strong>：是一种高性能的日志文件系统，而且是RHEL 7/8中默认的文件管理系统。它的优势在发生意外宕机后尤其明显，即可以快速地恢复可能被破坏的文件，而且强大的日志功能只需花费极低的计算和存储性能。它支持的最大存储容量为18EB，这几乎满足了所有需求。</li></ol><blockquote><p>在拿到一块新的硬盘存储设备后，先需要分区，然后再格式化文件系统，最后才能挂载并正常使用。硬盘的分区操作取决于您的需求和硬盘大小；也可以选择不进行分区，但是必须对硬盘进行格式化处理。</p><p>下面有给 vmware 中的 Linux 系统扩容过程。</p></blockquote><h2 id="常用磁盘分区命令"><a href="#常用磁盘分区命令" class="headerlink" title="常用磁盘分区命令"></a>常用磁盘分区命令</h2><h3 id="发现硬盘"><a href="#发现硬盘" class="headerlink" title="发现硬盘"></a>发现硬盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出块设备与分区</span><br>lsblk -f<br>fdisk -l   <span class="hljs-comment"># 需要 root</span><br><br><span class="hljs-comment"># SCSI 设备列表</span><br>lsscsi<br><br><span class="hljs-comment"># NVMe 设备（如果是 NVMe）</span><br>nvme list<br><br><span class="hljs-comment"># 设备的 UUID/LABEL 信息</span><br>blkid<br><br><span class="hljs-comment"># /dev/disk 下的各种快捷链接（by-uuid, by-id, by-path）</span><br><span class="hljs-built_in">ls</span> -l /dev/disk/by-*<br></code></pre></td></tr></table></figure><h3 id="分区-Partitioning"><a href="#分区-Partitioning" class="headerlink" title="分区 Partitioning"></a>分区 Partitioning</h3><p>选择 GPT 还是 MBR（GPT 推荐用于现代系统、大于2TiB、UEFI）；分区对齐（1MiB）；分区类型标记（LVM/raid 等）。</p><p>常用工具：<code>parted</code>, <code>fdisk</code> (或 <code>cfdisk</code>), <code>gdisk</code>/<code>sgdisk</code> (GPT)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk /dev/sdb<br><span class="hljs-comment"># n (new), p (primary), &lt;enter&gt; start, &lt;enter&gt; end, t (set type), w (write)</span><br></code></pre></td></tr></table></figure><p>写完分区后让内核识别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">partprobe /dev/sdb       <span class="hljs-comment"># 通知内核</span><br>partx -a /dev/sdb        <span class="hljs-comment"># 添加分区到内核</span><br><span class="hljs-comment"># 或 kpartx 创建映射（对磁盘镜像有用）</span><br>kpartx -av /dev/sdb<br></code></pre></td></tr></table></figure><h3 id="建立文件系统（mkfs）"><a href="#建立文件系统（mkfs）" class="headerlink" title="建立文件系统（mkfs）"></a>建立文件系统（mkfs）</h3><p>建立文件系统有三条常走的路子</p><h4 id="直接建立文件系统（easy）"><a href="#直接建立文件系统（easy）" class="headerlink" title="直接建立文件系统（easy）"></a>直接建立文件系统（easy）</h4><p>如果不使用 LVM/RAID，直接对 <code>/dev/sdb1</code> mkfs：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkfs.ext4 -L data /dev/sdb1<br><span class="hljs-comment"># 或 XFS</span><br>mkfs.xfs -f -L data /dev/sdb1<br><span class="hljs-comment"># btrfs</span><br>mkfs.btrfs -L data /dev/sdb1<br></code></pre></td></tr></table></figure><h4 id="逻辑卷管理（LVM）"><a href="#逻辑卷管理（LVM）" class="headerlink" title="逻辑卷管理（LVM）"></a>逻辑卷管理（LVM）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 假设 /dev/sdb1 已分区并标记为 LVM</span><br>pvcreate /dev/sdb1<br>vgcreate vg_data /dev/sdb1            <span class="hljs-comment"># 或 vgextend existing_vg /dev/sdb1</span><br>lvcreate -n lv_data -L 100G vg_data   <span class="hljs-comment"># 创建逻辑卷</span><br><span class="hljs-comment"># 查看状态</span><br>pvs; vgs; lvs<br><span class="hljs-comment"># 在 LV 上创建文件系统</span><br>mkfs.ext4 /dev/vg_data/lv_data<br>mount /dev/vg_data/lv_data /data<br></code></pre></td></tr></table></figure><p>扩展流程（底层盘扩大或新增 PV）： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 若新 PV 已加入：</span><br>vgextend vg_data /dev/sdc1<br>lvextend -l +100%FREE /dev/vg_data/lv_data   <span class="hljs-comment"># 扩展 LV</span><br><span class="hljs-comment"># 扩展文件系统</span><br>resize2fs /dev/vg_data/lv_data       <span class="hljs-comment"># ext4 (可在线扩展)</span><br><span class="hljs-comment"># 或</span><br>xfs_growfs /data                     <span class="hljs-comment"># xfs 必须以挂载点为参数，且挂载时可扩展</span><br></code></pre></td></tr></table></figure><h4 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br></code></pre></td></tr></table></figure><h3 id="持久化挂载（mount、-etc-fstab）"><a href="#持久化挂载（mount、-etc-fstab）" class="headerlink" title="持久化挂载（mount、/etc/fstab）"></a>持久化挂载（mount、/etc/fstab）</h3><p>添加到 /etc/fstab 推荐使用 UUID：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 得到 UUID</span><br>blkid /dev/sdb1<br><span class="hljs-comment"># /etc/fstab 示例</span><br>UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx  /data  ext4  defaults,noatime  0 2<br><br><span class="hljs-comment"># 重新加载并挂载</span><br>mount -a<br><span class="hljs-comment"># 或单独挂载</span><br>mount /dev/sdb1 /data<br></code></pre></td></tr></table></figure><h3 id="常用命令一览表"><a href="#常用命令一览表" class="headerlink" title="常用命令一览表"></a>常用命令一览表</h3><p><strong>检测/识别</strong></p><ul><li><code>dmesg | tail</code>、<code>journalctl -k</code></li><li><code>lsblk -f</code>, <code>fdisk -l</code>, <code>blkid</code>, <code>nvme list</code>, <code>lsscsi</code></li></ul><p><strong>重扫描</strong></p><ul><li><code>for h in /sys/class/scsi_host/host*; do echo &quot;- - -&quot; &gt; $h/scan; done</code></li><li><code>echo 1 &gt; /sys/class/block/sdX/device/rescan</code></li><li><code>udevadm trigger; udevadm settle</code></li></ul><p><strong>分区</strong></p><ul><li><code>parted /dev/sdX</code>, <code>fdisk /dev/sdX</code>, <code>sgdisk -n ... /dev/sdX</code></li><li><code>partprobe /dev/sdX</code>, <code>partx -a /dev/sdX</code>, <code>kpartx -av /dev/image</code></li></ul><p><strong>LVM</strong></p><ul><li><code>pvcreate</code>, <code>pvdisplay</code>, <code>vgcreate</code>, <code>vgextend</code>, <code>lvcreate</code>, <code>lvextend</code>, <code>lvresize</code>, <code>pvs</code>, <code>vgs</code>, <code>lvs</code>, <code>pvresize</code></li></ul><p><strong>RAID</strong></p><ul><li><code>mdadm --create/detail/assemble --manage</code>, <code>cat /proc/mdstat</code>, <code>mdadm --detail --scan</code></li></ul><p><strong>文件系统</strong></p><ul><li><code>mkfs.ext4</code>, <code>mkfs.xfs</code>, <code>mkfs.btrfs</code>, <code>fsck.ext4</code>, <code>xfs_repair</code>, <code>resize2fs</code>, <code>xfs_growfs</code></li></ul><p><strong>加密</strong></p><ul><li><code>cryptsetup luksFormat</code>, <code>cryptsetup luksOpen</code>, <code>/etc/crypttab</code></li></ul><p><strong>挂载/持久化</strong></p><ul><li><code>mount</code>, <code>umount</code>, <code>findmnt</code>, <code>blkid</code>, 编辑 <code>/etc/fstab</code>，<code>mount -a</code></li></ul><p><strong>诊断/工具</strong></p><ul><li><code>tune2fs</code>, <code>wipefs</code>, <code>kpartx</code>, <code>losetup -fP</code>, <code>udevadm info -q all -n /dev/sdX</code></li></ul><h2 id="给-VMware-中-Ubuntu-live-server-扩容"><a href="#给-VMware-中-Ubuntu-live-server-扩容" class="headerlink" title="给 VMware 中 Ubuntu live server 扩容"></a>给 VMware 中 Ubuntu live server 扩容</h2><p>VMware 中的 ubuntu 虚拟机磁盘空间使用已经达到 89%，下面给该虚拟机根目录扩容</p><p><img src="image0.png" alt=""></p><h3 id="发现硬盘-1"><a href="#发现硬盘-1" class="headerlink" title="发现硬盘"></a>发现硬盘</h3><ul><li><strong>目的</strong>：让操作系统知道有新硬盘，并在 <code>/dev/</code> 下生成对应的设备节点，比如 <code>/dev/sda</code>。</li><li><strong>类比</strong>：就像你插了一块新 U 盘，电脑必须先“认出来”才行。</li><li>常用命令：<code>lsblk</code>, <code>fdisk -l</code>, <code>dmesg | tail</code></li></ul><p>首先在 ubuntu 的属性中，将设备的硬盘调大。</p><p><img src="image1.png" alt=""></p><p>可能需要重启虚拟机才能在虚拟机中看到。</p><p><code>fdisk -l</code></p><p><img src="image2.png" alt=""></p><p><code>lsblk</code></p><p><img src="image3.png" alt="sda 总共80GB sda1、2、3占用40GB（扩容之前设置的虚拟机磁盘容量）"></p><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><ul><li><strong>目的</strong>：把一整块盘切成逻辑区域（分区），便于管理。</li><li><strong>类比</strong>：就像一栋楼，你要先分“房间”（分区），然后才能给每个房间安排用途。</li><li><strong>工具</strong>：<code>fdisk</code>, <code>parted</code>, <code>gdisk</code>。</li><li><strong>结果</strong>：会出现 <code>/dev/sdb1</code>, <code>/dev/sdb2</code> 这样的设备。</li></ul><ol><li>首先确定对哪一块存储设备分区，<code>sda</code>设备显然多出40GB的空闲磁盘。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> fdisk /dev/sda<br></code></pre></td></tr></table></figure><p><img src="image4.png" alt=""></p><ol><li><p><img src="image5.png" alt="2、键入 m 查看帮助"></p></li><li></li></ol><p><img src="image6.png" alt="3、创建一个新的分区"></p><ul><li><code>Partition number</code>可以自己指定，就是分区完成后 sda1、sda2、sda3 中后边的数字。</li><li><code>First sector / First sector</code> 是分区起始结束位置。回车默认使用空闲分区的全部。</li></ul><p><img src="image7.png" alt="cmd p 查看此时分区情况"></p><p>确认分区无误后就可以输入 w ，保存写入刚才的操作。如果之前的操作有误，可以输入 q 重新划分，之前的操作不会生效。</p><p><img src="image8.png" alt=""></p><p>使用<code>df -h</code>发现磁盘的可使用空间没有变化，此时还不能使用这块新建的分区，还差最后一步建立文件系统。</p><h3 id="卷管理-RAID-加密（可选层）"><a href="#卷管理-RAID-加密（可选层）" class="headerlink" title="卷管理 / RAID / 加密（可选层）"></a>卷管理 / RAID / 加密（可选层）</h3><h3 id="创建文件系统（格式化分区）"><a href="#创建文件系统（格式化分区）" class="headerlink" title="创建文件系统（格式化分区）"></a>创建文件系统（格式化分区）</h3><ul><li><strong>目的</strong>：在分区或逻辑卷上建立文件系统（ext4、xfs 等）。没有文件系统，数据无法被 OS 组织。</li><li><strong>类比</strong>：房间有了，要装上“柜子”和“抽屉”来放东西（文件系统就是这些存储结构）。</li><li><strong>命令</strong>：<code>mkfs.ext4 /dev/sdb1</code>/<code>mkfs.xfs /dev/sdb1</code></li></ul><ol><li><p><img src="image9.png" alt="使用 df -T 查看之前的文件系统格式"></p></li><li></li></ol><p><img src="image10.png" alt="使用 mkfs.ext4 建立 ext4 格式文件系统"></p><p>此时才能真正的存放文件。</p><h3 id="挂载（mount）扩容根目录-5-6"><a href="#挂载（mount）扩容根目录-5-6" class="headerlink" title="挂载（mount）扩容根目录 5.6"></a>挂载（mount）扩容根目录 5.6</h3><ul><li><strong>目的</strong>：把文件系统挂到目录树（如 <code>/data</code>），这样用户才能通过路径访问。</li><li><strong>类比</strong>：房间建好了，还得给它挂个门牌号（目录名），否则你找不到这个房间。</li><li><strong>命令</strong>：<code>mkdir /data</code>/<code>mount /dev/sdb1 /data</code></li><li>不挂载，文件系统只是存在但无法使用。</li></ul><blockquote><p>如果根目录 <code>/</code> 已经有一个文件系统（通常是 <code>ext4</code> 或 <code>xfs</code>），所以要扩容它，必须让这个文件系统所在的块设备“变大”。也就是说，新盘不能简单 <code>mount /dev/sdb1 /</code>（这样会覆盖原 <code>/</code>，系统直接挂掉）。正确做法是让新空间并入现有的根分区/逻辑卷，再扩展文件系统。</p></blockquote><h3 id="扩容（-）"><a href="#扩容（-）" class="headerlink" title="扩容（/）"></a>扩容（/）</h3><h4 id="场景-1（根目录不在-LVM-中，直接扩容）"><a href="#场景-1（根目录不在-LVM-中，直接扩容）" class="headerlink" title="场景 1（根目录不在 LVM 中，直接扩容）"></a>场景 1（根目录不在 LVM 中，直接扩容）</h4><p>如果你在 VMware 里给原根磁盘（如 <code>/dev/sda</code>）直接扩容：</p><ol><li>在宿主机 (VMware) 增大虚拟磁盘大小。</li><li>在 Linux 内核里 <code>echo 1 &gt; /sys/class/block/sda/device/rescan</code> 或 <code>rescan-scsi-bus</code>。</li><li>用 <code>growpart /dev/sda 2</code>（假设根分区是 <code>/dev/sda2</code>）调整分区大小。</li><li>扩展文件系统：<ul><li><code>resize2fs /dev/sda2</code> （ext4）</li><li><code>xfs_growfs /</code> （xfs，参数必须是挂载点）。</li></ul></li></ol><p>这样根目录 <code>/</code> 会变大，不需要重新挂载。</p><h4 id="场景-2（根目录在-LVM-中）"><a href="#场景-2（根目录在-LVM-中）" class="headerlink" title="场景 2（根目录在 LVM 中）"></a>场景 2（根目录在 LVM 中）</h4><ol><li>修改文件类型</li></ol><p>使用 LVM 管理扩展逻辑卷，要修改上面创建分区时选择的类型，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.</span><br><span class="hljs-built_in">sudo</span> fdisk /dev/sda<br><br><span class="hljs-comment"># 2.</span><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): p<br><br>Device        Start       End  Sectors Size Type<br>/dev/sda1      2048      4095     2048   1M BIOS boot<br>/dev/sda2      4096   4198399  4194304   2G Linux filesystem<br>/dev/sda3   4198400  83884031 79685632  38G Linux filesystem<br>/dev/sda4  83884032 167772126 83888095  40G Linux filesystem<br><br><span class="hljs-comment"># 3.m -&gt; t   change a partition type</span><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): t<br>Partition number (1-4, default 4): 4<br>Partition <span class="hljs-built_in">type</span> or <span class="hljs-built_in">alias</span> (<span class="hljs-built_in">type</span> L to list all): L<br>...<br>30 Linux LVM                      E6D6D379-F507-44C2-A23C-238F2A3DF928<br>...<br>Partition <span class="hljs-built_in">type</span> or <span class="hljs-built_in">alias</span> (<span class="hljs-built_in">type</span> L to list all): lvm<br>Changed <span class="hljs-built_in">type</span> of partition <span class="hljs-string">&#x27;Linux filesystem&#x27;</span> to <span class="hljs-string">&#x27;Linux LVM&#x27;</span>.<br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): p<br><br>Device        Start       End  Sectors Size Type<br>/dev/sda1      2048      4095     2048   1M BIOS boot<br>/dev/sda2      4096   4198399  4194304   2G Linux filesystem<br>/dev/sda3   4198400  83884031 79685632  38G Linux filesystem<br>/dev/sda4  83884032 167772126 83888095  40G Linux LVM<br><br>Command (m <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>): w<br>The partition table has been altered.<br>Syncing disks.<br></code></pre></td></tr></table></figure><ol><li>把分区加入 LVM：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo pvcreate /dev/sda4<br>sudo vgextend ubuntu-vg /dev/sda4<br></code></pre></td></tr></table></figure><p><img src="image11.png" alt=""></p><p><img src="image12.png" alt=""></p><blockquote><p>查看确认系统是否使用 LVM<code>lsblk -f</code>， 可以看到每个分区的 FSTYPE，如果是 <code>LVM2_member</code>，说明它属于 LVM；如果直接是 <code>ext4</code> / <code>xfs</code>，说明就是普通分区文件系统。  </p><p><code>sudo vgs</code> <code>sudo lvs</code> <code>sudo pvs</code>vgs：列出现有卷组（VG）的名字。lvs：列出逻辑卷（LV），以及它挂在哪个 VG 上。pvs：列出物理卷（PV）对应的设备。</p></blockquote><ol><li>扩展根逻辑卷：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv<br></code></pre></td></tr></table></figure><p><img src="image13.png" alt=""></p><blockquote><p>不同系统此处名称不同</p><p><img src="image14.png" alt=""></p></blockquote><ol><li>扩展文件系统：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">sudo resize2fs /dev/centos/root   # ext4<br># xfs_growfs /                 # xfs<br></code></pre></td></tr></table></figure><p><img src="image15.png" alt=""></p><p>至此，扩容完毕，这是生产环境里最常用的方式：新盘不会单独挂载，而是通过 LVM 加入根卷组，根目录就透明地扩容了。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://zhuanlan.zhihu.com/p/1916590652310942157">https://zhuanlan.zhihu.com/p/1916590652310942157</a></p><p><a href="https://www.cnblogs.com/iubolgs/p/15639039.html">https://www.cnblogs.com/iubolgs/p/15639039.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 用户&amp;用户组管理</title>
    <link href="/2025/09/14/Linux-%E7%94%A8%E6%88%B7-%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/"/>
    <url>/2025/09/14/Linux-%E7%94%A8%E6%88%B7-%E7%94%A8%E6%88%B7%E7%BB%84%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>#</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li><strong>用户（User）</strong></li></ol><ul><li>Linux 是一个多用户系统，每个用户有唯一的 <strong>用户名</strong> 和 <strong>UID（User ID）</strong>。<ul><li><strong>root</strong>（超级用户，UID=0）：拥有系统最高权限。</li><li><strong>系统用户</strong>：系统运行时需要的用户（如 <code>nobody</code>, <code>daemon</code>），UID 通常小于 1000。</li><li><strong>普通用户</strong>：一般 UID 从 1000 开始（在现代 Linux 系统中），最大 60000。</li></ul></li></ul><ol><li><strong>用户组（Group）</strong></li></ol><ul><li>每个用户都属于至少一个组（即 <strong>主组</strong>）。</li><li>一个用户还可以加入多个附加组（即 <strong>附属组</strong>）。</li><li>每个组由 <strong>组名</strong> 和 <strong>GID（Group ID）</strong> 唯一标识。</li></ul><ol><li><strong>用户与组的关系</strong></li></ol><ul><li>每个文件或目录都有 <strong>所属用户</strong> 和 <strong>所属组</strong>。</li><li>权限管理（rwx）基于 <strong>所属用户、所属组、其他用户</strong> 三类身份来控制。</li></ul><h2 id="相关配置文件"><a href="#相关配置文件" class="headerlink" title="相关配置文件"></a>相关配置文件</h2><p>Linux 的用户和组信息存储在文本配置文件中：</p><ol><li><code>/etc/passwd</code><br>存储用户基本信息（账号、UID、GID、主目录、登录 shell）。<br><code>cat /etc/passwd</code>查看用户信息，示例：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root:x:0:0:root:/root:/bin/bash<br>lsf:x:1000:1000:LSFUser:/home/lsf:/bin/bash<br></code></pre></td></tr></table></figure><p>各字段含义：</p><ul><li>用户名</li><li>密码占位符（x，实际在 <code>/etc/shadow</code>；早期 Linux 系统中直接存储密码哈希，但为提升安全性，现在此字段仅作为 “占位符”，实际密码哈希已迁移至 <code>/etc/shadow</code>，仅 root 可读取。）</li><li>UID（系统内部识别用户的<strong>数字编号</strong>，系统不依赖用户名，而是通过 UID 判断用户身份及权限。）<ul><li><strong>超级用户 UID</strong>：固定为 <code>0</code>（仅 <code>root</code> 用户，拥有系统所有权限，任何 UID 为 0 的用户都会被视为超级用户，即使用户名不是 <code>root</code>）。</li><li><strong>系统用户 UID</strong>：通常为 <code>1-999</code>（用于运行系统服务，如 <code>bin</code>（UID=1）、<code>daemon</code>（UID=2）、<code>www-data</code>（UID=33，Web 服务用户），这类用户无登录权限，家目录也非普通用户目录）。</li><li><strong>普通用户 UID</strong>：通常从 <code>1000</code> 开始（由管理员创建，用于日常登录和操作，权限受限制）。</li></ul></li></ul><p>使用<code>id username</code>可以查看用户 UID 以及所属用户组。</p><ul><li>GID（用户<strong>初始组（Primary Group）</strong> 的数字编号，初始组是用户登录时默认所属的组，其权限会自动应用于用户创建的文件 / 目录，文件的默认组就是用户的初始组。）</li><li>用户描述（可选，字段名称源于早期 Unix 系统的历史遗留，无实际技术含义，仅作注释。）</li><li>用户主目录（用户登录系统后默认进入的目录，也是用户存储个人文件、配置的专属目录（普通用户对家目录拥有读写执行权限，其他用户通常无权限。）</li><li>用户默认登录 Shell（默认启动的<strong>命令行解释器</strong>，决定用户使用的命令行环境。）</li></ul><ol><li><code>/etc/shadow</code><br>存储用户密码和密码策略（加密形式），只有 root 可读。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root:*:19769:0:99999:7:::<br>moon:$6$...:20301:0:99999:7:::<br></code></pre></td></tr></table></figure><p>各个字段含义：</p><ul><li>用户名（moon）</li><li>密码（$6$…，存储用户密码的哈希值，<script type="math/tex">6</script> 表示使用 <strong>SHA-512</strong> 算法加密。）</li><li>最后一次修改密码的日期（20301，为从1970年1月1日以来的天数，比如在 2025 年 8 月 1 日修改过密码，那么这里就是 20301。）</li><li>密码有效期最少天数（0，限制用户 <strong>上次修改密码后，至少需间隔多少天才能再次修改密码</strong>。为 0 或者空表示没有显示，可以随时修改密码，用于防止用户频繁改密码规避安全策略。）</li><li>密码有效期最多的天数（99999，强制用户 <strong>上次修改密码后，最多可使用多少天</strong>，超过此天数后密码失效，用户必须重新设置密码才能登录。99999 表示密码永不过期，约等于 273 年，是默认配置）</li><li>密码修改警告期（7，在 “密码有效期最多天数” 到期前，提前多少天向用户发送 <strong>密码即将过期的警告</strong>，提醒用户及时修改。）</li><li>密码禁用期（NULL，也叫 “密码过期宽限期”，指 “密码有效期最多天数” 到期后，用户仍可登录的 <strong>宽限天数</strong>；超过宽限天数后，账号会被自动锁定。）</li><li>账号过期日期（NULL，指定账号的 <strong>绝对失效日期</strong>，无论密码是否过期，超过此日期后账号无法登录，常用于临时账号，如实习员工账号。）</li><li>保留字段（NULL，预留字段，目前无实际功能，为未来 Linux 系统扩展账号安全策略预留空间。）</li></ul><p>以上字段均可以通过命令修改。</p><ol><li><code>/etc/group</code><br>存储组信息。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">root:x:0:<br>daemon:x:1:<br>bin:x:2:<br>sys:x:3:<br>sudo:x:27:moon<br>www-data:x:33:<br>moon:x:1000:<br></code></pre></td></tr></table></figure><p>各个字段含义：</p><ul><li>组名</li><li>组密码（存储用户组的密码哈希值，用于控制 “非组内用户临时加入该组” 的权限，实际场景中极少使用，因组权限通常通过用户归属管理，x 表示组密码已存储，但实际哈希值保存在 <code>/etc/gshadow</code>文件中；x 仅为占位符，而非真实密码。）</li><li>组 ID（系统组 0~999，普通组 1000~）</li><li>组内成员（存储属于该组的用户列表，这些用户的 “附加组” 包含此组，主组需看 <code>/etc/passwd</code> 配置。）可以通过<code>usermod -ag &lt;组名&gt; &lt;用户名&gt;</code>向组内添加成员。（如果该字段为空表示该组无 “附加成员”，但可能有用户的 “主组” 是此组，需查看 <code>/etc/passwd</code> 确认。）</li></ul><ol><li><code>/etc/gshadow</code><br>存储组密码和组管理员信息。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">root:*::<br>daemon:*::<br>bin:*::<br>sys:*::<br>moon:!::<br></code></pre></td></tr></table></figure><ul><li>组名（关联用户组身份，与 /etc/group 组名一致，唯一不重复，符合组名命名规范。）</li><li>组密码哈希（验证非管理员临时加入组的身份，<code>!/*</code> 表示禁止设密码，空表示无密码。）</li><li>组管理员（授权用户管理组成员（无需 root 权限），空表示无组管理员，多用户用逗号分隔。）</li><li>组成员（记录组的附加成员列表    空表示无附加成员，多用户用逗号分隔。）</li></ul><h2 id="用于-amp-用户组管理"><a href="#用于-amp-用户组管理" class="headerlink" title="用于&amp;用户组管理"></a>用于&amp;用户组管理</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ol><li>创建用户</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建用户</span><br>useradd -m -s /bin/bash &lt;username&gt;<br><br><span class="hljs-comment"># 2. 创建带过期时间的用户</span><br>useradd -m -e 2023-12-31 -c <span class="hljs-string">&quot;Temporary User&quot;</span> &lt;username&gt;<br><br><span class="hljs-comment"># 3. 创建系统用户 无登录shell</span><br>useradd -r -s /sbin/nologin -c <span class="hljs-string">&quot;Web Server&quot;</span> apache<br><br><span class="hljs-comment"># 4. 创建用户并加入指定用户组</span><br>useradd -m -g developers -G <span class="hljs-built_in">sudo</span>,devops &lt;username&gt;<br><br><span class="hljs-comment"># 设置用户登陆密码</span><br>passwd &lt;username&gt;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">Usage: useradd [options] LOGIN<br>       useradd -D<br>       useradd -D [options]<br><br>Options:<br>      --badnames                <span class="hljs-keyword">do</span> not check <span class="hljs-keyword">for</span> bad names 禁用对用户名的检查（特殊字符检查）<br>  -b, --base-dir BASE_DIR       base directory <span class="hljs-keyword">for</span> the home directory of the 指定用户基准目录，当不使用 -d 指定指定具体目录时，会创建 BASE_DIR/&lt;username&gt;<br>                                new account<br>      --btrfs-subvolume-home    use BTRFS subvolume <span class="hljs-keyword">for</span> home directory<br>  -c, --comment COMMENT         GECOS field of the new account 设置用户的注释信息（GECOS 字段）<br>  -d, --home-dir HOME_DIR       home directory of the new account 指定用户目录<br>  -D, --defaults                <span class="hljs-built_in">print</span> or change default useradd configuration 单独使用 useradd -D 会显示当前默认值；结合其他选项可修改默认配置<br>  -e, --expiredate EXPIRE_DATE  expiration <span class="hljs-built_in">date</span> of the new account<br>  -f, --inactive INACTIVE       password inactivity period of the new account 设置密码过期后的宽限时间<br>  -g, --gid GROUP               name or ID of the primary group of the new 指定用户的主组（组必须存在）<br>                                account<br>  -G, --<span class="hljs-built_in">groups</span> GROUPS           list of supplementary <span class="hljs-built_in">groups</span> of the new 指定用户的附加组（存在）<br>                                account<br>  -h, --<span class="hljs-built_in">help</span>                    display this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span><br>  -k, --skel SKEL_DIR           use this alternative skeleton directory<br>  -K, --key KEY=VALUE           override /etc/login.defs defaults<br>  -l, --no-log-init             <span class="hljs-keyword">do</span> not add the user to the lastlog and<br>                                faillog databases<br>  -m, --create-home             create the user<span class="hljs-string">&#x27;s home directory 自动创建用户目录 /home/&lt;username&gt;</span><br><span class="hljs-string">  -M, --no-create-home          do not create the user&#x27;</span>s home directory 不创建用户主目录<br>  -N, --no-user-group           <span class="hljs-keyword">do</span> not create a group with the same name as 不为用户创建同名的私有组<br>                                the user <br>  -o, --non-unique              allow to create <span class="hljs-built_in">users</span> with duplicate 允许创建具有重复 UID 的用户（通常 UID 是唯一的，此选项用于特殊情况下创建共享 UID 的用户）<br>                                (non-unique) UID<br>  -p, --password PASSWORD       encrypted password of the new account 设置用户密码 （需要提供的是已加密的密码字符串，而不是明文）<br>  -r, --system                  create a system account 创建系统账号（UID通常小于1000，用于运行服务）<br>  -R, --root CHROOT_DIR         directory to <span class="hljs-built_in">chroot</span> into 在指定的 <span class="hljs-built_in">chroot</span> 目录中创建用户<br>  -P, --prefix PREFIX_DIR       prefix directory <span class="hljs-built_in">where</span> are located the /etc/* files<br>  -s, --shell SHELL             login shell of the new account 指定用户登录shell<br>  -u, --uid UID                 user ID of the new account 指定 UID （唯一，除非 -o）<br>  -U, --user-group              create a group with the same name as the user 创建与用户名相同的组作为主组<br>  -Z, --selinux-user SEUSER     use a specific SEUSER <span class="hljs-keyword">for</span> the SELinux user mapping<br>      --extrausers              Use the extra <span class="hljs-built_in">users</span> database<br></code></pre></td></tr></table></figure><ol><li>删除用户</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">userdel -f -r &lt;username&gt;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">Usage: userdel [options] LOGIN<br><br>Options:<br>  -f, --force                   force removal of files,<br>                                even <span class="hljs-keyword">if</span> not owned by user<br>  -h, --<span class="hljs-built_in">help</span>                    display this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span><br>  -r, --remove                  remove home directory and mail spool<br>  -R, --root CHROOT_DIR         directory to <span class="hljs-built_in">chroot</span> into 在指定的 <span class="hljs-built_in">chroot</span> 目录中执行删除操作<br>  -P, --prefix PREFIX_DIR       prefix directory <span class="hljs-built_in">where</span> are located the /etc/* files<br>      --extrausers              Use the extra <span class="hljs-built_in">users</span> database<br>  -Z, --selinux-user            remove any SELinux user mapping <span class="hljs-keyword">for</span> the user<br><br></code></pre></td></tr></table></figure><ol><li>修改用户</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">usermod -l newname oldname    <span class="hljs-comment"># 修改用户名</span><br>usermod -g groupname user     <span class="hljs-comment"># 修改主组</span><br>usermod -G group1,group2 user <span class="hljs-comment"># 添加附属组</span><br>usermod -d /new/home user     <span class="hljs-comment"># 修改 home 目录</span><br>usermod -s /bin/zsh user      <span class="hljs-comment"># 修改登录 shell</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">Usage: usermod [options] LOGIN<br><br>Options:<br>  -b, --badnames                allow bad names<br>  -c, --comment COMMENT         new value of the GECOS field<br>  -d, --home HOME_DIR           new home directory <span class="hljs-keyword">for</span> the user account<br>  -e, --expiredate EXPIRE_DATE  <span class="hljs-built_in">set</span> account expiration <span class="hljs-built_in">date</span> to EXPIRE_DATE<br>  -f, --inactive INACTIVE       <span class="hljs-built_in">set</span> password inactive after expiration<br>                                to INACTIVE<br>  -g, --gid GROUP               force use GROUP as new primary group<br>  -G, --<span class="hljs-built_in">groups</span> GROUPS           new list of supplementary GROUPS<br>  -a, --append                  append the user to the supplemental GROUPS<br>                                mentioned by the -G option without removing<br>                                the user from other <span class="hljs-built_in">groups</span><br>  -h, --<span class="hljs-built_in">help</span>                    display this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span><br>  -l, --login NEW_LOGIN         new value of the login name<br>  -L, --lock                    lock the user account<br>  -m, --move-home               move contents of the home directory to the<br>                                new location (use only with -d)<br>  -o, --non-unique              allow using duplicate (non-unique) UID<br>  -p, --password PASSWORD       use encrypted password <span class="hljs-keyword">for</span> the new password<br>  -R, --root CHROOT_DIR         directory to <span class="hljs-built_in">chroot</span> into<br>  -P, --prefix PREFIX_DIR       prefix directory <span class="hljs-built_in">where</span> are located the /etc/* files<br>  -s, --shell SHELL             new login shell <span class="hljs-keyword">for</span> the user account<br>  -u, --uid UID                 new UID <span class="hljs-keyword">for</span> the user account<br>  -U, --unlock                  unlock the user account<br>  -v, --add-subuids FIRST-LAST  add range of subordinate uids<br>  -V, --del-subuids FIRST-LAST  remove range of subordinate uids<br>  -w, --add-subgids FIRST-LAST  add range of subordinate gids<br>  -W, --del-subgids FIRST-LAST  remove range of subordinate gids<br>  -Z, --selinux-user SEUSER     new SELinux user mapping <span class="hljs-keyword">for</span> the user account<br></code></pre></td></tr></table></figure><ol><li>查看用户信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">id</span> username        <span class="hljs-comment"># 显示 UID、GID、组信息</span><br><span class="hljs-built_in">groups</span> username    <span class="hljs-comment"># 显示用户所属组</span><br><span class="hljs-built_in">whoami</span>             <span class="hljs-comment"># 当前登录用户</span><br>getent passwd user <span class="hljs-comment"># 从系统数据库查询用户信息</span><br></code></pre></td></tr></table></figure><blockquote><p><code>getent</code> 是 Linux 系统中用于<strong>查询系统管理数据库</strong>的工具，而 <code>passwd</code> 是其支持的核心数据库之一（对应 <code>/etc/passwd</code> 文件及系统其他用户数据库）。<code>getent passwd &lt;username&gt;</code> 命令的核心作用是：<strong>查询指定用户名（</strong><code>**&lt;username&gt;**</code><strong>）的用户账号详细信息</strong>，输出格式与 <code>/etc/passwd</code> 文件的记录格式完全一致。</p><ul><li><p><strong>查询范围</strong>：不仅会读取 <code>/etc/passwd</code> 静态文件，还会自动查询系统配置的其他用户数据库（如 NIS、LDAP、sssd 等集中式认证数据库），覆盖所有系统可识别的用户。</p></li><li><p><strong>输出格式</strong>：返回一条以冒号（<code>:</code>）分隔的字符串，包含该用户的 7 个核心属性（与 <code>/etc/passwd</code> 字段完全对应），比直接查看 <code>/etc/passwd</code> 更高效（无需手动搜索）。</p></li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1zqqx@VM-16-9-ubuntu:~$ getent passwd 1zqqx<br>1zqqx:x:1002:1003::/home/1zqqx:/bin/bash<br></code></pre></td></tr></table></figure><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><ol><li>添加组</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">groupadd groupname<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">Usage: groupadd [options] GROUP<br><br>Options:<br>  -f, --force                   <span class="hljs-built_in">exit</span> successfully <span class="hljs-keyword">if</span> the group already exists,<br>                                and cancel -g <span class="hljs-keyword">if</span> the GID is already used<br>  -g, --gid GID                 use GID <span class="hljs-keyword">for</span> the new group<br>  -h, --<span class="hljs-built_in">help</span>                    display this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span><br>  -K, --key KEY=VALUE           override /etc/login.defs defaults<br>  -o, --non-unique              allow to create <span class="hljs-built_in">groups</span> with duplicate<br>                                (non-unique) GID<br>  -p, --password PASSWORD       use this encrypted password <span class="hljs-keyword">for</span> the new group<br>  -r, --system                  create a system account<br>  -R, --root CHROOT_DIR         directory to <span class="hljs-built_in">chroot</span> into<br>  -P, --prefix PREFIX_DIR       directory prefix<br>      --extrausers              Use the extra <span class="hljs-built_in">users</span> database<br></code></pre></td></tr></table></figure><ol><li>删除组</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">groupdel groupname<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">Usage: groupdel [options] GROUP<br><br>Options:<br>  -h, --<span class="hljs-built_in">help</span>                    display this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span><br>  -R, --root CHROOT_DIR         directory to <span class="hljs-built_in">chroot</span> into<br>  -P, --prefix PREFIX_DIR       prefix directory <span class="hljs-built_in">where</span> are located the /etc/* files<br>  -f, --force                   delete group even <span class="hljs-keyword">if</span> it is the primary group of a user<br>      --extrausers              Use the extra <span class="hljs-built_in">users</span> database<br></code></pre></td></tr></table></figure><ol><li>修改组</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">groupmod -n newgroup oldgroup   # 修改组名<br>groupmod -g 2000 groupname      # 修改 GID<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">Usage: groupmod [options] GROUP<br><br>Options:<br>  -g, --gid GID                 change the group ID to GID<br>  -h, --<span class="hljs-built_in">help</span>                    display this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span><br>  -n, --new-name NEW_GROUP      change the name to NEW_GROUP<br>  -o, --non-unique              allow to use a duplicate (non-unique) GID<br>  -p, --password PASSWORD       change the password to this (encrypted)<br>                                PASSWORD<br>  -R, --root CHROOT_DIR         directory to <span class="hljs-built_in">chroot</span> into<br>  -P, --prefix PREFIX_DIR       prefix directory <span class="hljs-built_in">where</span> are located the /etc/* files<br></code></pre></td></tr></table></figure><ol><li>将用户加入组<code>gpasswd</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置组密码（设置后，非组成员可以通过 newgrp 组名 命令并输入组密码临时加入该组，组密码使用场景较少，通常不建议设置）</span><br>gpasswd &lt;gname&gt;<br><br><span class="hljs-comment"># 添加组管理员</span><br>gpasswd -A u1,u2,... &lt;gname&gt;<br><br><span class="hljs-comment"># 移除</span><br>gpasswd -dA u1,u2,... &lt;gname&gt;<br><br><span class="hljs-comment"># 删除组成员</span><br>gpasswd -d u1 &lt;gname&gt;<br><br><span class="hljs-comment"># 设置组的成员列表，会覆盖原有成员</span><br>gpasswd -M u1,u2,... &lt;gname&gt;<br><br><span class="hljs-comment"># 锁定/解锁 组</span><br><span class="hljs-comment"># 锁定组后，不允许添加新成员或更改组信息（锁定操作会在 /etc/gshadow 的组密码字段前添加 !）</span><br>gpasswd -l 组名   <span class="hljs-comment"># 锁定组</span><br>gpasswd -u 组名   <span class="hljs-comment"># 解锁组</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">Usage: gpasswd [option] GROUP<br><br>Options:<br>  -a, --add USER                add USER to GROUP<br>  -d, --delete USER             remove USER from GROUP<br>  -h, --<span class="hljs-built_in">help</span>                    display this <span class="hljs-built_in">help</span> message and <span class="hljs-built_in">exit</span><br>  -Q, --root CHROOT_DIR         directory to <span class="hljs-built_in">chroot</span> into<br>  -r, --remove-password         remove the GROUP<span class="hljs-string">&#x27;s password</span><br><span class="hljs-string">  -R, --restrict                restrict access to GROUP to its members</span><br><span class="hljs-string">  -M, --members USER,...        set the list of members of GROUP</span><br><span class="hljs-string">      --extrausers              use the extra users database</span><br><span class="hljs-string">  -A, --administrators ADMIN,...</span><br><span class="hljs-string">                                set the list of administrators for GROUP</span><br><span class="hljs-string">Except for the -A and -M options, the options cannot be combined.</span><br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><ol><li>创建一个组并添加成员：</li></ol><p><code>groupadd dev</code></p><p><code>gpasswd -a alice dev</code></p><p><code>gpasswd -a bob dev</code></p><ol><li>设置组管理员并让其管理成员：</li></ol><p><code>gpasswd -A alice dev</code> 设 alice 为 dev 组管理员，之后 alice 可以执行：</p><p><code>gpasswd -a charlie dev</code>无需 root 权限</p><ol><li>查看组信息确认修改：</li></ol><p><code>getent group dev</code></p><p><code>getent gshadow dev</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware此平台不支持虚拟化的“amd-v/rvi”的解决方法</title>
    <link href="/2025/08/10/VMware%E6%AD%A4%E5%B9%B3%E5%8F%B0%E4%B8%8D%E6%94%AF%E6%8C%81%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E2%80%9Camd-v-rvi%E2%80%9D%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2025/08/10/VMware%E6%AD%A4%E5%B9%B3%E5%8F%B0%E4%B8%8D%E6%94%AF%E6%8C%81%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E2%80%9Camd-v-rvi%E2%80%9D%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在vmware中安装使用eveng发现报错<code>此平台不支持虚拟化的“amd-v/rvi”</code>，</p><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法 1"></a>解决方法 1</h2><p>上网搜了一下发现是<code>hyper-v</code>与<code>vmware</code>冲突导致，需要将与其相关的功能关闭。</p><ol><li><p>关闭如下图所示功能：<br><img src="image1.png" alt="img" title="要关闭的功能"></p></li><li><p>关闭内存完整性<br>打开 Windows 安全中心 -&gt; 设备安全性 -&gt; 内核隔离 -&gt; 内核隔离详细信息，然后将内存完整性关闭。</p></li></ol><h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法 2"></a>解决方法 2</h2><p>但是错误并没有解决，继续搜索发现如下解决办法：</p><ol><li><p>Win11 24H2镜像出货的机型会默认打开“Virtualization-based Security（VBS）基于虚拟化的安全性”功能，此功能打开可能会导致部分游戏性能下降卡顿等情况，查看设备是否开启了VBS，<code>Win+R</code>呼出运行框，输入<code>msinfo32</code>查看VBS的运行状态，我的已经关闭了，网图如下：<br><img src="image2.png" alt="img" title="基于虚拟化的安全性 正在运行"></p></li><li><p>执行bat脚本，关闭基于虚拟化的安全性。具体脚本内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br><br>dism /Online /Disable-Feature:microsoft-hyper-v-all /NoRestart<br>dism /Online /Disable-Feature:IsolatedUserMode /NoRestart<br>dism /Online /Disable-Feature:Microsoft-Hyper-V-Hypervisor /NoRestart<br>dism /Online /Disable-Feature:Microsoft-Hyper-V-Online /NoRestart<br>dism /Online /Disable-Feature:HypervisorPlatform /NoRestart<br><br>REM ===========================================<br><br>mountvol X: /s<br>copy %WINDIR%\System32\SecConfig.efi X:\EFI\Microsoft\Boot\SecConfig.efi /Y<br>bcdedit /create &#123;0cb3b571-2f2e-4343-a879-d86a476d7215&#125; /d <span class="hljs-string">&quot;DebugTool&quot;</span> /application osloader<br>bcdedit /set &#123;0cb3b571-2f2e-4343-a879-d86a476d7215&#125; path <span class="hljs-string">&quot;\EFI\Microsoft\Boot\SecConfig.efi&quot;</span><br>bcdedit /set &#123;bootmgr&#125; bootsequence &#123;0cb3b571-2f2e-4343-a879-d86a476d7215&#125;<br>bcdedit /set &#123;0cb3b571-2f2e-4343-a879-d86a476d7215&#125; loadoptions DISABLE-LSA-ISO,DISABLE-VBS<br>bcdedit /set &#123;0cb3b571-2f2e-4343-a879-d86a476d7215&#125; device partition=X:<br>mountvol X: /d<br>bcdedit /set hypervisorlaunchtype off<br><br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span> =======================================================<br><span class="hljs-built_in">echo</span> 当前操作已完成，接下来请关闭此窗口并重启电脑，然后根据屏幕提示完成剩下操作。<br>pause &gt; nul<br><span class="hljs-built_in">echo</span>.<br><span class="hljs-built_in">echo</span>.<br></code></pre></td></tr></table></figure></li><li><p>将文本保存为<code>.bat</code>格式的文件，右键<code>管理员权限</code>运行，等待设备重启之后，<code>按四次F3</code>，即可关闭。重新打开虚拟机，设备正常。</p></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/614643382">https://zhuanlan.zhihu.com/p/614643382</a></li><li><a href="https://blog.51cto.com/wangguangjie/13480278">https://blog.51cto.com/wangguangjie/13480278</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>VMware</tag>
      
      <tag>Windows 11</tag>
      
      <tag>虚拟化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言宏</title>
    <link href="/2025/05/10/C%E8%AF%AD%E8%A8%80%E5%AE%8F/"/>
    <url>/2025/05/10/C%E8%AF%AD%E8%A8%80%E5%AE%8F/</url>
    
    <content type="html"><![CDATA[<p>在 C 语言中，宏（Macro）是一种预处理指令，用于在<strong>编译前</strong>对源代码进行文本替换。</p><p>宏由预处理指令 <code>#define</code> 定义，分为两种类型：</p><ul><li>对象式宏（Object-like Macro）：无参数的简单文本替换。</li><li>函数式宏（Function-like Macro）：带参数的类似函数调用的宏。</li></ul><h2 id="对象式宏"><a href="#对象式宏" class="headerlink" title="对象式宏"></a>对象式宏</h2><p><code>#define 标识符 替换文本</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PI 3.14159 <span class="hljs-comment">// 定义常量（如 PI、MAX_SIZE）。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SIZE 100 </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG <span class="hljs-comment">// 条件编译（如 #ifdef DEBUG）。</span></span><br></code></pre></td></tr></table></figure><h2 id="函数式宏"><a href="#函数式宏" class="headerlink" title="函数式宏"></a>函数式宏</h2><p><code>#define 宏名(参数列表) 替换文本</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 简单函数式宏</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQUARE(x) ((x) * (x))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX(a, b) ((a) &gt; (b) ? (a) : (b))</span><br><br><span class="hljs-comment">// 多行宏（用反斜杠 \ 连接）</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAP(a, b) \</span><br><span class="hljs-meta">    do &#123; \</span><br><span class="hljs-meta">        typeof(a) temp = (a); \</span><br><span class="hljs-meta">        (a) = (b); \</span><br><span class="hljs-meta">        (b) = temp; \</span><br><span class="hljs-meta">    &#125; while (0)</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">5</span>;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">10</span>;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Square: %d\n&quot;</span>, SQUARE(x));      <span class="hljs-comment">// 展开为 ((x) * (x))</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Max: %d\n&quot;</span>, MAX(x, y));         <span class="hljs-comment">// 展开为 ((x) &gt; (y) ? (x) : (y))</span><br>    <br>    SWAP(x, y);                             <span class="hljs-comment">// 展开为一个 do-while 语句</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Swapped: x=%d, y=%d\n&quot;</span>, x, y);  <span class="hljs-comment">// 输出: x=10, y=5</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项</p><blockquote><p>括号保护：参数和整个表达式都应加括号，避免运算符优先级问题。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADD(a, b) a + b  <span class="hljs-comment">// ADD(2, 3) * 4 会展开为 2 + 3 * 4 = 14</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADD(a, b) ((a) + (b))  <span class="hljs-comment">// 展开为 ((2) + (3)) * 4 = 20</span></span><br></code></pre></td></tr></table></figure><br>参数不计算：宏参数是纯文本替换，不会提前求值</p></blockquote><h2 id="预处理器操作符-与"><a href="#预处理器操作符-与" class="headerlink" title="预处理器操作符#与##"></a>预处理器操作符<code>#</code>与<code>##</code></h2><h3 id="操作符（字符串化）"><a href="#操作符（字符串化）" class="headerlink" title="操作符（字符串化）"></a>操作符（字符串化）</h3><p>将宏参数转换为字符串常量，参数会被直接转换为字符串，不会进行表达式求值或变量替换；如果参数本身是字符串，会自动添加额外的引号（例如 “abc” 会变成 “\”abc\””）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRINT(x) printf(#x <span class="hljs-string">&quot; = %d\n&quot;</span>, x)</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">42</span>;<br>    PRINT(num);  <span class="hljs-comment">// 展开为 printf(&quot;num&quot; &quot; = %d\n&quot;, num);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>gcc -e</code> 指令查看预宏展开后的文件如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"># <span class="hljs-number">5</span> <span class="hljs-string">&quot;c_define.c&quot;</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-string">&quot; = %d\n&quot;</span>, x);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="操作符（记号链接）"><a href="#操作符（记号链接）" class="headerlink" title="操作符（记号链接）"></a>操作符（记号链接）</h3><p><code>##</code> 操作符用于将两个预处理记号（token）连接成一个新的记号。它可以在宏定义的参数列表或替换文本中使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONCAT(a, b) a##b</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> num10 = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Value: %d\n&quot;</span>, CONCAT(num, <span class="hljs-number">10</span>));  <span class="hljs-comment">// 等价于 printf(&quot;%d&quot;, num10);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="define与const"><a href="#define与const" class="headerlink" title="define与const"></a><code>define</code>与<code>const</code></h2><p><code>#define</code> 和 <code>const</code> 都可用于定义常量，但它们的实现机制、作用域和使用场景有本质区别。<br><img src="image1.png" alt="img"></p><h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><p>宏定义也可以用于条件编译<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEBUG</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> LOG(msg) printf(<span class="hljs-string">&quot;[DEBUG] %s\n&quot;</span>, msg)</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> LOG(msg)  <span class="hljs-comment">// 空定义，忽略日志</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// 检查系统平台</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __linux__</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> PLATFORM <span class="hljs-string">&quot;Linux&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(_WIN32)</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> PLATFORM <span class="hljs-string">&quot;Windows&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> PLATFORM <span class="hljs-string">&quot;Unknown&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>conda文档</title>
    <link href="/2025/04/01/conda%E6%96%87%E6%A1%A3/"/>
    <url>/2025/04/01/conda%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="1-conda手册"><a href="#1-conda手册" class="headerlink" title="1. conda手册"></a>1. conda手册</h1><div class="row">    <embed src="/pdf/conda-24.4.0.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="2-hexo-常用操作"><a href="#2-hexo-常用操作" class="headerlink" title="2. hexo 常用操作"></a>2. hexo 常用操作</h1><p>hexo 文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><h2 id="2-1-文章"><a href="#2-1-文章" class="headerlink" title="2.1 文章"></a>2.1 文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p>Hexo 有三种默认布局：post、page 和 draft。 每个布局创建的文件会被保存到不同的路径。 新创建的帖子被保存到 source/_post 文件夹。</p><blockquote><p>布局路径<br>post：source/_posts；<br>page：source；<br>draft：source/_drafts；</p></blockquote><h2 id="2-2-草稿"><a href="#2-2-草稿" class="headerlink" title="2.2 草稿"></a>2.2 草稿</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo publish [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p>在本地编辑时如果要看到草稿的预览内容，在启动命令后加上<code>--draft</code>选项或在 <code>_config.yml</code> 启用 <code>render_draft</code> 设置来渲染草稿。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s --draft<br></code></pre></td></tr></table></figure></p><!-- todo --><h2 id="2-3-Page"><a href="#2-3-Page" class="headerlink" title="2.3 Page"></a>2.3 Page</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page &lt;page_name&gt;<br></code></pre></td></tr></table></figure><h2 id="2-3-在文章中支持pdf展示"><a href="#2-3-在文章中支持pdf展示" class="headerlink" title="2.3 在文章中支持pdf展示"></a>2.3 在文章中支持pdf展示</h2><p>懒人办法：</p><ol><li>安装pdf插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-pdf<br></code></pre></td></tr></table></figure></li><li>在source文件夹下新建一个 <code>pdf</code> 文件夹，把需要展示的pdf放到该文件夹下。</li><li>在正文部分添加<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;% pdf /pdf/pdf-name.pdf %&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Fluid 配置 Giscus</title>
    <link href="/2025/03/29/Hexo-Fluid-%E9%85%8D%E7%BD%AE-Giscus/"/>
    <url>/2025/03/29/Hexo-Fluid-%E9%85%8D%E7%BD%AE-Giscus/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>使用Giscus在Hexo Fluid文章中评论功能。</p><p>giscus官网：<a href="https://giscus.app/zh-CN">https://giscus.app</a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>准备一个github的公开仓库</li><li>为该仓库安装 <code>giscus App</code>, <a href="https://github.com/apps/giscus">安装giscus App</a></li><li>在该仓库中开启<code>Discussions</code>功能,<a href="https://docs.github.com/en/github/administering-a-repository/managing-repository-settings/enabling-or-disabling-github-discussions-for-a-repository">在你的仓库中启用</a></li></ul><h1 id="Giscus-的运作原理"><a href="#Giscus-的运作原理" class="headerlink" title="Giscus 的运作原理"></a>Giscus 的运作原理</h1><p>&emsp;&emsp; giscus 加载时，会使用 GitHub Discussions 搜索 API 根据选定的映射方式（如 <code>URL</code>、<code>pathname</code>、<code>&lt;title&gt;</code> 等）来查找与当前页面关联的 discussion。如果找不到匹配的 discussion，giscus bot 就会在第一次有人留下评论或回应时自动创建一个 discussion。</p><p>&emsp;&emsp;访客如果想要评论，必须按照 GitHub OAuth 流程授权 giscus app 代表他发布，或者可以直接在 GitHub Discussion 里评论。你可以在 GitHub 上管理评论。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>&emsp;&emsp;接下来在 giscus 的官网 配置模块选择所需配置：<br><img src="image-1.png" alt=""><br>&emsp;&emsp;其中 Discussion 分类那里 giscus 推荐使用的 是 Announcements ，但是我没有弄好，索性就用 General 了，全部选好后，下边会出现一个你选的配置 <code>&lt;script&gt;</code> 标签。在 Fluid 的 <code>_config.yml</code> 文件中把对应位置 配置填上去即可。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">giscus:</span><br>  <span class="hljs-attr">repo:</span> <br>  <span class="hljs-attr">repo_id:</span> <br>  <span class="hljs-attr">category:</span> <br>  <span class="hljs-attr">category_id:</span> <br>  <span class="hljs-comment"># Available values: pathname | url | title | og:title</span><br>  <span class="hljs-attr">mapping:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-comment"># Available values: 0 | 1</span><br>  <span class="hljs-attr">reactions_enabled:</span> <span class="hljs-number">1</span><br>   <span class="hljs-comment"># Available values: 0 | 1</span><br>  <span class="hljs-attr">emit_metadata:</span> <span class="hljs-number">0</span><br>  <span class="hljs-comment"># Available values: light | dark | dark_high_contrast | transparent_dark | preferred-color-scheme</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">preferred_color_scheme</span><br>  <span class="hljs-comment"># Available values: en | zh-CN</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-comment"># Place the comment box above the comments</span><br>  <span class="hljs-attr">input_position:</span> <span class="hljs-string">top</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;注意在 Fluid 开启评论插件<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 评论插件</span><br><span class="hljs-comment"># Comment plugin</span><br><span class="hljs-attr">comments:</span><br><span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br><span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br><span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo | cusdis | giscus | discuss</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">giscus</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考研记录</title>
    <link href="/2025/03/25/%E8%80%83%E7%A0%94%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/03/25/%E8%80%83%E7%A0%94%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>&emsp;&emsp;今天是2025年3月25日，上午看到学院的拟录取名单，不觉如释重负，那些胆战心惊离我而去。应老师和学弟建议，写下这篇经验帖子，顺便记录这一年来的生活经历。也许是氛围到此，觉得不写些东西记录这段经历，好像丢失了什么。</p><p>&emsp;&emsp;我考的 11408，总分 328 ，政治 53，英语 39，数学 119，408 117，初试11/35，复试3/28，上机 189/200，已成功被中国矿业大学（北京）拟录取。虽然成绩单上的分数没有那么突出，或以下内容或仅仅记录本人的心路历程，记录本人学习过程，仅供经验参考，不对任何结果负责，其中或许语言逻辑结构不是很连贯，见谅。</p><h1 id="关于初试"><a href="#关于初试" class="headerlink" title="关于初试"></a>关于初试</h1><p>&emsp;&emsp;英语，我的英语基础是非常差劲的（英语水平大概就是语法一点不会，只认识单词，<code>gd学长</code>是真正的六边形战士），暑假之前的学习基本上就是上午写一篇英一的阅读，写完之后对答案，然后查不认识的单词，记到一张A4纸上，再看B站上一位 up 的英语阅读讲解（这位：<a href="https://space.bilibili.com/258959750/lists/715867">Eli田瀚博的个人空间</a>），听他讲之后能对文章里面的长难句有个大概的翻译理解。但是这位up的每篇阅读的讲解都有至少一个半小时，所以后面大概到4、5月份时候就不看了，后来在室友的推荐下，看（这位：<a href="https://space.bilibili.com/36033152">大道至简Loru的个人空间</a>）up 的2011年之后的英语阅读讲解，我最受益的是这个 up 的英语单词整理，他把每一篇的常见单词整理出一本pdf（在这：<a href="https://mp.weixin.qq.com/s/qOW0N4-0gKl0YWKuJAkOsw">大道至简Loru-完整版词汇书</a>），把他打印下来，写完一篇阅读之后背背单词，把自己不认识，经常忘的单词或者熟词异意也记在上面，在晚上闭馆前完成今天的任务后有时间也会再看看，单词还是非常重要的。国庆之后开始每天上午一套数学卷，当天中午或者是第二天把错题纠正一下，下午写 408 真题，晚上写英语的小三门外加学一些英语作文的句子和政治。</p><p>&emsp;&emsp;数学，数学用的是张宇的基础30讲，我个人感觉25版张宇基础30讲还是非常不错的。基础到7月中旬结束，印象最深的还是高数 仅数一 多元积分那，刚开始学的时候几种积分方式真是一脸懵，后来画思维导图分类一下，先确定积分类型，再套公式，好像也就那么回事；线性代数也是全程张宇；概率论与数理统计，因为大三下有概率论的课而且这个时候张宇概率论还没更新，所以我概率论前前后后看了好几个老师，有余炳森，李良，方浩，都看过一点。可以根据适合自己的风格学习。数学一定要写题，根据自己跟的老师选习题册。从7月底开始看张宇的强化课，对我来说强化课是有点难的，强化书上的例题仅仅写了张宇圈出来的那些题，1000题强化篇全部写了，可能比强化书上的稍简单，更多的还是回忆公式以及对应题目的解题方法。国庆节后开始写真题，先写了21-24年的，再从20年开始往前写，写真题时可能会感到熟悉，但是也不会说见到熟悉的就跳过，也要认真计算确保每一步都是正确的。后面模拟题写了24、25《张宇4套卷》（比张八简单），合工大共创超越10套就写了第一套，还参加了 姜晓千 的万人模考（9.9元4场考试带人工批改），均分90左右，读者也一定不要觉得模拟的分数就是你的实际水平。</p><p>&emsp;&emsp;对于经常犯的计算错误，要在平时习惯中尽量改正，比如本人经常在计算过程中算着算着系数就丢了，可以将暂时不参与计算的系数或者常数打上标记，画个符号标记提醒一下，在该题计算结束后从头至尾再看一遍计算过程是否漏掉了系数。考试时给的草稿纸大概有4张A4纸那么大，完全够用，一定要划清每道题的演草界限，也方便最后检查。到这里就不得不说一下我今年考的数学了，简直就是一坨<code>shit</code>，列出我的罪证，读者引以为戒：第17题：心中默算漏掉系数$ \frac{1}{5} $；第18题：脑子抽抽的计算积分$ \int{\ln x}d\ln x $的结果成了$ \ln |\ln x| $；第20题：题中空间圆投影到坐标平面应为椭圆，直接按圆计算。。。可能考场上真的有降智buff，一定要注意平时的做题习惯<code>T_T</code>。</p><p>&emsp;&emsp;统考408，用的王道的书。在考试范围内，除了计组难一些，其他三门还是容易理解的，主要还是内容太多，容易忘，所以要多重复。在第一轮复习中，主要还是看王道书，写课后题目，王道的视频看的不多，其实像数据结构，操作系统，计网，计组这些课特别是计组，操作系统，在大三上学期刚学过，第一轮看书的时候不太需要看王道的视频课，直接看书可以回忆起绝大部分知识点，哪部分实在是抽象或者书上写得乱七八糟再去看一下视频讲解，也不一定是一棵歪脖子树上吊死，B 站上也有不错的视频针对一个知识点的讲解。有时候王道书上的题写不对也不要怀疑自己的能力，课后的练习题有的确实是<code>shit</code>。</p><p>&emsp;&emsp;在差不多到8月中旬才把四本书看一遍（基本都是晚上的时间学408，<del>然后周六闭馆早回寝室玩去了，有时候晚上出去吃饭了:stuck_out_tongue_closed_eyes:，有点时间都去玩了</del><code>T_T</code>）。第二轮复习强化看了王道咸鱼的课，主要是针对大题的专题讲解，但是除专题之外的小知识点还是需要自己去再重温。我在第二轮复习时，把咸鱼的基础课 ppt 做思维导图打印装订成册（单面打印），在复习的时候遇到遗忘的直接翻这个思维导图，清晰明了，同时在写题时遇到易错或者没有复习到的知识点可以记录在对应思维导图页的背面便于查阅。在复习对应的科目时，结合对应的逻辑来记忆。每种新旧技术的迭代，都是对实际应用问题的解决。</p><p>&emsp;&emsp;今年（25年）在考场上看到某些题有种熟悉的感觉，有些不过是以往真题的变形罢了，总体来说比较常规。这里贴一个408真题详解，目前作者还在继续更新：<a href="https://zhuanlan.zhihu.com/p/3484668199">408历年真题解析（草稿） - 知乎</a></p><p>&emsp;&emsp;政治，政治可以尽早开始。不然考前两周真的很焦虑:confounded:。25年的政治情况相信大家也略有耳闻，可以关注一下肖秀荣、徐涛老师关于政治考研形势的微信文章。这里就不写我的反面案例了。​</p><p>&emsp;&emsp;最后，如果考408要注意总体上的时间分配，不要学鄙人：<del>【数：408：英：政 = 5：2.5：2：0.5】</del></p><p>&emsp;&emsp;考试期间心态也很重要。</p><h1 id="关于竞赛"><a href="#关于竞赛" class="headerlink" title="关于竞赛"></a>关于竞赛</h1><!-- &emsp;&emsp;不登高山，不知天之高也；不临深溪，不知地之厚也。 --><p><img src="icpc-logo.png" alt="img" title="不登高山，不知天之高也；不临深溪，不知地之厚也。"></p><p>&emsp;&emsp;首先要表达一下对社团指导老师的歉意，辜负了刘老师的期望，没有取的过好的成绩，但是在学习算法竞赛的过程中，也算是收获颇丰，受益良多。</p><p>&emsp;&emsp;算法竞赛涉及到常用知识点与数据结构这门课有高度的重合，对大多数考自命题的学校来说数据结构也是必考之一。就我个人来说，也就是刚入门的水平，对一些常用的基础算法都还了解，已经涵盖大部分数据结构知识点，剩下涉及到图中的关键路径，树部分的B、B+树的性质，平衡树，红黑树的性质等在算法竞赛中不是很常用的知识点需要额外的再仔细学习。如果能够在大一大二比较轻松的时候学到这些，在面对408或者数据结构课程时可能会更加的从容；而且在大一大二训练成绩不错可以参加<a href="https://www.lanqiao.cn/">蓝桥杯</a>，<a href="https://www.matiji.net/exam/">百度之星</a>；如果能够通过校内选拔赛还有：<a href="https://gplt.patest.cn/regulation">天梯赛</a>，<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B">ccpc</a>，<a href="https://baike.baidu.com/item/ACM%E5%9B%BD%E9%99%85%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B">icpc</a>省赛、区域赛。</p><p>&emsp;&emsp;408数据结构部分大题也一道12分左右的算法（或数据结构）题，要能够说明解题思路，手写关键部分的代码，并说明空复杂度。其考察内容不出竞赛所学知识。认真训练过肯定是对这道题手拿把掐。并且对于复试需要上机的学校来说，有过算法竞赛的基础，对于上机试题也是相对来说更加有优势。而且其实大部分学校的上机考试是比平常算竟训练的题目简单一些，都是比较常规的模拟题加上一些基础知识点，毕竟要考虑大多数人。<del>比如本人复试面试一坨<code>shit</code>，自我介绍疙瘩，英语文献翻译不顺，老师提问回答不上来，面试完都没心情玩了，直接订票滚蛋了的情况，依然依靠上机（差..AK）复试第三。</del></p><p>&emsp;&emsp;做题是一个非常有意思的过程，但是可能确实是需要坐一定的时间的“冷板凳”才能看出成绩（正面例子：<code>gd学长:XXX...</code>，反面例子：<code>鄙人: x</code>），但是他带给你的是你在面对难题时的思考方式上的提升。</p><h1 id="关于经历"><a href="#关于经历" class="headerlink" title="关于经历"></a>关于经历</h1><p>&emsp;&emsp;可能大部分人到复试的时候项目经历只有一个毕设，这里介绍一个 <font color=#7030a0>南京大学</font> 的非常有意思的选修课《PA实验课》，仅需C语言就可以学习到一个完整的项目，在学习的过程中学习解决问题的方法。在B站有这门课的完整教学视频（更重要的是动手做）：<a href="https://space.bilibili.com/49964811/lists/3778580">NJU-why老师-PA实验课</a>；以及南京大学jyy老师的操作系统课程：<a href="https://space.bilibili.com/202224425/lists/4823953">NJU-jyy老师-操作系统</a></p><hr><p>&emsp;&emsp;最后，祝愿各位都能考上自己的目标院校。</p>]]></content>
    
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/18/hello-world/"/>
    <url>/2025/03/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>Hexo 用户手册：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><p>Fluid 用户手册：<a href="https://hexo.fluid-dev.com/docs/guide/">https://hexo.fluid-dev.com/docs/guide/</a></p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
